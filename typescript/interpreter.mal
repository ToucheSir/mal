(load-file "env.mal")
(load-file "core.mal")
(load-file "core_mal.mal")

;; FIXME TODO HELP hacked-in "forward declarations". We need two-pass compilation.
(def! EVAL "__fwd_decl__")
;;

;; read
(def! READ (fn* [strng]
                (read-string strng)))

;; eval
(def! is-pair (fn* [x]
                   (if (sequential? x)
                     (if (> (count x) 0)
                       true))))

(def! QUASIQUOTE (fn* [ast]
                      (cond
                        (not (is-pair ast))
                        (list 'quote ast)

                        (= 'unquote (first ast))
                        (nth ast 1)

                        (if (is-pair (first ast))
                          (if (= 'splice-unquote (first (first ast)))
                            true))
                        (list 'concat (nth (first ast) 1) (QUASIQUOTE (rest ast)))

                        "else"
                        (list 'cons (QUASIQUOTE (first ast)) (QUASIQUOTE (rest ast))))))

(def! is-macro-call (fn* [ast env]
                         (if (list? ast)
                           (let* [a0 (first ast)]
                             (if (symbol? a0)
                               (if (env-find env a0)
                                 (let* [m (meta (env-get env a0))]
                                   (if m
                                     (if (get m "ismacro")
                                       true)))))))))

(def! MACROEXPAND (fn* [ast env]
                       (if (is-macro-call ast env)
                         (let* [mac (env-get env (first ast))
                                expanded (MACROEXPAND (apply mac (rest ast)) env)]
                           expanded)
                         ast)))

(def! eval-ast (fn* [ast env] (do
                                ;;(do (prn "eval-ast" ast "/" (keys env)) )
                                (cond
                                  (symbol? ast) (env-get env ast)

                                  (list? ast)   (map (fn* [exp] (EVAL exp env)) ast)

                                  (vector? ast) (apply vector (map (fn* [exp] (EVAL exp env)) ast))

                                  (map? ast)    (apply hash-map
                                                       (apply concat
                                                              (map (fn* [k] [k (EVAL (get ast k) env)])
                                                                   (keys ast))))

                                  "else"        ast))))

(def! LET (fn* [env args]
               (if (> (count args) 0)
                 (do
                   (env-set env (nth args 0) (EVAL (nth args 1) env))
                   (LET env (rest (rest args)))))))

(def! EVAL (fn* [ast env] (do
                            ;;(do (prn "EVAL" ast "/" (keys @env)) )
                            (if (not (list? ast))
                              (eval-ast ast env)

                              ;; apply list
                              (let* [ast (MACROEXPAND ast env)]
                                (if (not (list? ast))
                                  ast

                                  (let* [a0 (first ast)]
                                    (cond
                                      (= 'def! a0)
                                      (env-set env (nth ast 1) (EVAL (nth ast 2) env))

                                      (= 'let* a0)
                                      (let* [let_env (new-env env)]
                                        (do
                                          (LET let_env (nth ast 1))
                                          (EVAL (nth ast 2) let_env)))

                                      (= 'quote a0)
                                      (nth ast 1)

                                      (= 'quasiquote a0)
                                      (let* [a1 (nth ast 1)]
                                        (EVAL (QUASIQUOTE a1) env))

                                      (= 'defmacro! a0)
                                      (let* [a1 (nth ast 1)
                                             a2 (nth ast 2)
                                             f (EVAL a2 env)
                                             m (or (meta f) {})
                                             mac (with-meta f (assoc m "ismacro" true))]
                                        (env-set env a1 mac))

                                      (= 'macroexpand a0)
                                      (let* [a1 (nth ast 1)]
                                        (MACROEXPAND a1 env))

                                      (= 'try* a0)
                                      (if (= 'catch* (nth (nth ast 2) 0))
                                        (try*
                                          (EVAL (nth ast 1) env)
                                          (catch* exc
                                                  (EVAL (nth (nth ast 2) 2)
                                                        (new-env env
                                                                 [(nth (nth ast 2)1)]
                                                                 [exc]))))
                                        (EVAL (nth ast 1) env))

                                      (= 'do a0)
                                      (let* [el (eval-ast (rest ast) env)]
                                        (nth el (- (count el) 1)))

                                      (= 'if a0)
                                      (let* [cond (EVAL (nth ast 1) env)]
                                        (if (or (= cond nil) (= cond false))
                                          (if (> (count ast) 3)
                                            (EVAL (nth ast 3) env)
                                            nil)
                                          (EVAL (nth ast 2) env)))

                                      (= 'fn* a0)
                                      (fn* [& args]
                                           (EVAL (nth ast 2) (new-env env (nth ast 1) args)))

                                      "else"
                                      (let* [el (eval-ast ast env)
                                             f (first el)
                                             args (rest el)]
                                        (apply f args))))))))))

;; print
(def! PRINT (fn* [exp] (pr-str exp)))
